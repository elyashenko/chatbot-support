services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15
    container_name: chatbot_postgres
    environment:
      POSTGRES_DB: chatbot_support
      POSTGRES_USER: chatbot_user
      POSTGRES_PASSWORD: chatbot_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chatbot_user -d chatbot_support"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chatbot_backend
    environment:
      - DATABASE_URL=postgresql://chatbot_user:chatbot_password@postgres:5432/chatbot_support
      - CHROMA_PERSIST_DIRECTORY=/app/data/chroma_db
      - LOG_FILE=/app/logs/chatbot.log
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_data:/app/data
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatbot_network
    restart: unless-stopped

  # Frontend (React) - Node.js 22 LTS + Vite
  # Для production: измените dockerfile на Dockerfile.prod
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: chatbot_frontend
    environment:
      - HOST=0.0.0.0
      - VITE_HOST=0.0.0.0
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - chatbot_network
    restart: unless-stopped

  # Redis для кэширования (опционально)
  redis:
    image: redis:7-alpine
    container_name: chatbot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chatbot_network
    restart: unless-stopped

volumes:
  postgres_data:
  backend_data:
  backend_logs:
  redis_data:

networks:
  chatbot_network:
    driver: bridge
