#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
–ó–∞–ø—É—Å–∫: python scripts/add_test_docs.py
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É backend –≤ Python path
backend_root = Path(__file__).parent.parent
sys.path.insert(0, str(backend_root))

from app.models.vector_store import ChromaVectorStore
from app.models.embeddings import document_chunker

def create_test_documents():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã"""
    
    documents = [
        {
            "title": "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
            "content": """# –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç

## –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ certbot: `sudo apt install certbot`
2. –ü–æ–ª—É—á–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: `sudo certbot certonly --standalone -d yourdomain.com`
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `sudo certbot certificates`

## –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ nginx
```nginx
server {
    listen 443 ssl http2;
    server_name yourdomain.com;
    
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
}
```

## –®–∞–≥ 3: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
–î–æ–±–∞–≤—å—Ç–µ –≤ crontab: `0 12 * * * /usr/bin/certbot renew --quiet`

## –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SSL: https://www.ssllabs.com/ssltest/""",
            "category": "DevOps",
            "tags": ["ssl", "nginx", "security", "letsencrypt"]
        },
        {
            "title": "Docker –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
            "content": """# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤

## –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞
```dockerfile
# Build stage
FROM node:18-alpine AS builder
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production

# Production stage
FROM node:18-alpine
WORKDIR /app
COPY --from=builder /app/node_modules ./node_modules
COPY . .
EXPOSE 3000
CMD ["npm", "start"]
```

## –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ alpine –æ–±—Ä–∞–∑—ã
- –£–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
- –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ RUN –∫–æ–º–∞–Ω–¥—ã
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .dockerignore

## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
```bash
# –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–æ–≤
docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
docker stats

# –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–µ–≤
docker history image_name
```""",
            "category": "DevOps",
            "tags": ["docker", "optimization", "containers", "ci-cd"]
        },
        {
            "title": "PostgreSQL –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "content": """# –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PostgreSQL

## –ò–Ω–¥–µ–∫—Å—ã
```sql
-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
CREATE INDEX idx_users_email ON users(email);

-- –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å
CREATE INDEX idx_orders_user_date ON orders(user_id, created_at);

-- –ß–∞—Å—Ç–∏—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å
CREATE INDEX idx_active_users ON users(id) WHERE active = true;
```

## –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
```sql
-- EXPLAIN –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
EXPLAIN (ANALYZE, BUFFERS) 
SELECT * FROM users WHERE email = 'test@example.com';

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
SELECT schemaname, tablename, n_tup_ins, n_tup_upd, n_tup_del
FROM pg_stat_user_tables;
```

## –ù–∞—Å—Ç—Ä–æ–π–∫–∏ postgresql.conf
```ini
# –ü–∞–º—è—Ç—å
shared_buffers = 256MB
effective_cache_size = 1GB
work_mem = 4MB

# WAL
wal_buffers = 16MB
checkpoint_completion_target = 0.9""",
            "category": "Database",
            "tags": ["postgresql", "performance", "indexes", "optimization"]
        }
    ]
    
    return documents

def add_documents_to_vector_store():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É"""
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        vector_store = ChromaVectorStore()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        documents = create_test_documents()
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
        
        total_chunks = 0
        
        for i, doc in enumerate(documents, 1):
            print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç {i}/{len(documents)}: {doc['title']}")
            
            # –ß–∞–Ω–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            chunks = document_chunker.chunk_text(doc['content'])
            total_chunks += len(chunks)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É
            for chunk_data in chunks:
                chunk_text = chunk_data['text']
                chunk_metadata = chunk_data['metadata'].copy()
                chunk_metadata.update({
                    "title": doc['title'],
                    "category": doc['category'],
                    "tags": ", ".join(doc['tags']),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É
                    "source": "test_docs"
                })
                
                vector_store.add_documents([{"text": chunk_text, "metadata": chunk_metadata}])
            
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {total_chunks} —á–∞–Ω–∫–æ–≤ –∏–∑ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = vector_store.get_collection_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã:")
        print(f"   - –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats['total_documents']}")
        print(f"   - –†–∞–∑–º–µ—Ä –±–∞–∑—ã: {stats.get('database_size', 'N/A')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –°–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ RAG —Å–∏—Å—Ç–µ–º—É")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path.cwd().name == "backend":
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –ø–∞–ø–∫–∏ backend")
        print("   cd backend && python scripts/add_test_docs.py")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    add_documents_to_vector_store()
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É!")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:")
    print("   - '–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?'")
    print("   - '–ö–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã?'")
    print("   - '–ö–∞–∫ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å PostgreSQL?'")

if __name__ == "__main__":
    main()
